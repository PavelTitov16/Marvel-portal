{"version":3,"file":"static/js/125.1d17cf32.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    };\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">Homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;\r\n","import {useState, useEffect, useRef, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    const [offset, setOffset] = useState(1240);\r\n    const [charsEnded, setCharsEnded] = useState(false);\r\n    \r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true)\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    };\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemsLoading(newItemsLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharsEnded(charsEnded => ended);\r\n    };\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    };\r\n\r\n    function renderCharacters(charsArray) {\r\n        const chars = charsArray.map((char, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n\r\n            if (char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n\r\n            return (\r\n                <CSSTransition key={char.id} timeout={500} classNames=\"char__item\">\r\n                    <li \r\n                        className='char__item'\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(char.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(char.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                        <img src={char.thumbnail} alt={char.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{char.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n                \r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {chars}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    };\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderCharacters(charList), newItemsLoading);\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button \r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemsLoading}\r\n                style={{'display': charsEnded ? \"none\" : 'block'}}\r\n                className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;\r\n","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [props.charId]);\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    };\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There are no comics for this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        const comicId = item.resourceURI.split('/').pop();\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={`/comics/${comicId}`}>{item.name}</Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../components/randomChar/RandomChar\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../components/charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n                />\r\n            <title>Marvel information portal</title>\r\n        </Helmet>\r\n        <ErrorBoundary>\r\n            <RandomChar/>\r\n        </ErrorBoundary>\r\n        <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected} />\r\n            </ErrorBoundary>\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm />\r\n                </ErrorBoundary>\r\n            </div>\r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'} ) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=48fbea85f489db68eb5c80c37f69523d';\r\n    const _baseOffset = 220;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail:char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t\tgetCharacterByName,\r\n\t\tprocess,\r\n\t\tsetProcess\r\n\t};\r\n}\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemsLoading","setNewItemsLoading","offset","setOffset","charsEnded","setCharsEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","newItemLoading","Spinner","Error","charsArray","chars","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderCharacters","disabled","comics","_Fragment","comicId","resourceURI","split","pop","Link","to","concat","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}